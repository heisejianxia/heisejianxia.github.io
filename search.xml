<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GEct错误代码</title>
      <link href="/2019/10/21/gect-cuo-wu-dai-ma/"/>
      <url>/2019/10/21/gect-cuo-wu-dai-ma/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/10/21/markdown-yu-fa/"/>
      <url>/2019/10/21/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>相比WYSIWYG编辑器</p><p><strong>优点：</strong></p><p> 1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br> 2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p><p><strong>缺点：</strong></p><ol><li><p>需要记一些语法（当然，是很简单。五分钟学会）。</p></li><li><p>有些平台不支持Markdown编辑模式。</p></li></ol><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示</p><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><pre><code># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><p>效果如下：</p><pre><code># 这是一级标题</code></pre><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><p>加粗</p><p>  要加粗的文字左右分别用两个*号包起来</p></li><li><p>斜体</p><p>  要倾斜的文字左右分别用一个*号包起来</p></li><li><p>斜体加粗</p><p>  要倾斜和加粗的文字左右分别用三个*号包起来</p></li><li><p>删除线</p><p>  要加删除线的文字左右分别用两个~~号包起来</p></li></ul><p>示例：</p><pre><code>**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><p>效果如下：</p><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em></p><p><strong><em>这是斜体加粗的文字</em></strong></p><p><del>这是加删除线的文字</del></p><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt; n个… 貌似可以一直加下去，但没神马卵用<br>示例：</p><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。<br>示例：</p><pre><code>-------********</code></pre><p>效果如下：</p><p>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p><strong>语法：</strong></p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>示例：</p><pre><code>![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</code></pre><p>效果如下：</p><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p><blockquote><p>上传本地图片直接点击导航栏的图片标志，选择图片即可</p></blockquote><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p><strong>语法：</strong></p><pre><code>[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加</code></pre><p><strong>示例：</strong></p><pre><code>[简书](http://jianshu.com)[百度](http://baidu.com)</code></pre><p><strong>效果如下：</strong></p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a></p><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="•-无序列表"><a href="#•-无序列表" class="headerlink" title="• 无序列表"></a>• 无序列表</h3><p>语法:<br>无序列表<br>用 - + * 任何一种都可以</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>注意：- + * 跟内容之间都要有一个空格</p><p>效果如下：</p><ul><li>列表内容</li><li>列表内容</li><li>列表内容</li></ul><h3 id="•-有序列表"><a href="#•-有序列表" class="headerlink" title="• 有序列表"></a>• 有序列表</h3><p><strong>语法：</strong></p><p>数字加点</p><pre><code>1. 列表内容2. 列表内容3. 列表内容</code></pre><blockquote><p>注意：序号跟内容之间要有空格</p></blockquote><p><strong>效果如下：</strong></p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h3 id="•-列表嵌套"><a href="#•-列表嵌套" class="headerlink" title="• 列表嵌套"></a>• 列表嵌套</h3><p><strong>上一级和下一级之间敲三个空格即可</strong></p><pre><code>• 一级无序列表内容    • 二级无序列表内容    • 二级无序列表内容    • 二级无序列表内容• 一级无序列表内容    1. 二级有序列表内容    2. 二级有序列表内容    3. 二级有序列表内容1. 一级有序列表内容    • 二级无序列表内容    • 二级无序列表内容    • 二级无序列表内容2. 一级有序列表内容    1. 二级有序列表内容    2. 二级有序列表内容    3. 二级有序列表内容</code></pre><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p><strong>语法：</strong></p><pre><code>|**表头**|**表头**|**表头**|| - | :-: | -: || 内容 | 内容  | 内容 || 内容 | 内容  | 内容 |第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右</code></pre><blockquote><p>注：原生的语法两边都要用 | 包起来。此处省略</p></blockquote><p>示例：</p><pre><code>|姓名|技能|排行|| ---- | :---: | ---:|| 刘备 |  哭   | 大哥|| 关羽 |  打   | 二哥|| 张飞 |  骂   | 三弟|</code></pre><p><strong>效果如下：</strong></p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p><strong>语法：</strong><br>单行代码：代码之间分别用一个反引号包起来</p><pre><code>`代码内容`</code></pre><p>代码块：</p><p>代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre><code>(```)  代码...  代码...  代码...(```)</code></pre><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p><strong>示例：</strong></p><p><strong>单行代码</strong></p><pre><code>`create database hero;`</code></pre><p><strong>代码块</strong></p><pre><code>(```)    function fun(){         echo &quot;这是一句非常牛逼的代码&quot;;    }    fun();(```)</code></pre><p><strong>效果如下：</strong></p><p>单行代码</p><p><code>create database hero;</code></p><p>代码块</p><pre><code>function fun(){  echo &quot;这是一句非常牛逼的代码&quot;;}fun();</code></pre><h2 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h2><p>flow</p><pre><code>st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op</code></pre><p><strong>效果如下：</strong></p><p>flow<br>st=&gt;start: 开始<br>op=&gt;operation: My Operation<br>cond=&gt;condition: Yes or No?<br>e=&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op</p><p><strong>例如：</strong></p><pre><code>start=&gt;start: 开始loginInfo=&gt;inputoutput: 登录数据verifyLogin=&gt;subroutine: 登录验证isSuccess=&gt;condition: 验证成功？respondSuccess=&gt;operation: 响应成功responseFailure=&gt;operation: 响应失败end=&gt;end: 结束start-&gt;loginInfo-&gt;verifyLogin-&gt;isSuccessisSuccess(yes)-&gt;respondSuccess-&gt;endisSuccess(no)-&gt;responseFailure-&gt;end</code></pre><p><strong>效果如下：</strong></p><p>start=&gt;start: 开始<br>loginInfo=&gt;inputoutput: 登录数据<br>verifyLogin=&gt;subroutine: 登录验证<br>isSuccess=&gt;condition: 验证成功？<br>respondSuccess=&gt;operation: 响应成功<br>responseFailure=&gt;operation: 响应失败<br>end=&gt;end: 结束</p><p>start-&gt;loginInfo-&gt;verifyLogin-&gt;isSuccess<br>isSuccess(yes)-&gt;respondSuccess-&gt;end<br>isSuccess(no)-&gt;responseFailure-&gt;end</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/10/21/test/"/>
      <url>/2019/10/21/test/</url>
      
        <content type="html"><![CDATA[<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><p><strong>分割线</strong></p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>加粗</strong></p><p><em>倾斜</em></p><p><del>删除线</del></p><p><strong><em>倾斜加粗</em></strong></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><pre><code>&gt;这是引用的使用格式</code></pre><p><strong>效果：</strong></p><blockquote><p>这是引用的使用格式</p></blockquote><pre><code>引用嵌套的格式&gt;引用&gt;&gt;应用2&gt;&gt;&gt;引用3</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>效果:</strong></p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片语法</p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p><img src="http://pzt1mfyt3.bkt.clouddn.com/%E5%A4%AA%E9%98%B3%E8%83%BD%E6%8E%A7%E5%88%B6%E8%AF%B4%E6%98%8E.jpg" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最全Hexo博客搭建+主题优化+插件配置+错误分析</title>
      <link href="/2019/10/21/zui-quan-hexo-bo-ke-da-jian-zhu-ti-you-hua-cha-jian-pei-zhi-cuo-wu-fen-xi/"/>
      <url>/2019/10/21/zui-quan-hexo-bo-ke-da-jian-zhu-ti-you-hua-cha-jian-pei-zhi-cuo-wu-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ol><li>欢迎在文末留言，或者点击加入<a href="https://dwz.cn/Fdk9LftN" target="_blank" rel="noopener">QQ群933583982</a>互相交流。</li><li>本文采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议，转载请注明出处！</li></ol><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ol><li><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 下载，并安装。详细步骤：<a href="https://www.simon96.online/2018/11/10/hexo-env/" target="_blank" rel="noopener">https://www.simon96.online/2018/11/10/hexo-env/</a></p></li><li><p><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a> 下载，并安装。详细步骤：<a href="https://www.simon96.online/2018/11/10/hexo-env/" target="_blank" rel="noopener">https://www.simon96.online/2018/11/10/hexo-env/</a></p></li><li><p>安装Hexo，在命令行（即Git Bash）运行以下命令：</p><blockquote><p>npm install -g hexo-cli</p></blockquote></li><li><p>初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可：</p><p>以下，即存放Hexo初始化文件的路径， 即站点目录。</p><pre><code>$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</code></pre><p>新建完成后，在路径下，会产生这些文件和文件夹：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><p><strong>注</strong>：</p><ul><li><p>hexo相关命令均在<strong>站点目录</strong>下，用<strong>Git Bash</strong>运行。</p></li><li><p>站点配置文件：站点目录下的<code>_config.yml</code>。</p><p> 路径为<code>\_config.yml</code></p></li><li><p>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>。</p><p> 路径为<code>\themes\&lt;主题文件夹&gt;\_config.yml</code></p></li></ul></li><li><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p><blockquote><p>hexo server</p></blockquote></li><li><p>浏览器访问网址： <code>http://localhost:4000/</code></p></li></ol><p>至此，您的Hexo博客已经搭建在本地。</p><h4 id="实施方案"><a href="#实施方案" class="headerlink" title="实施方案"></a>实施方案</h4><h5 id="方案一：GithubPages"><a href="#方案一：GithubPages" class="headerlink" title="方案一：GithubPages"></a>方案一：GithubPages</h5><ol><li><p>创建<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io</p></li><li><p>将本地Hexo博客推送到GithubPages</p><p>3.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>3.2. 添加SSH key。</p><ul><li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p><pre><code>$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></pre></li><li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<a href="https://github.com/settings/keys" target="_blank" rel="noopener">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><pre><code>$ ssh -T git@github.com$ yes</code></pre></li></ul><p>3.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git  branch: master</code></pre><p>注意：上面仓库地址写ssh地址，不写http地址。</p><p>3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><pre><code>$ hexo g$ hexo d</code></pre></li><li><p>等待1分钟左右，浏览器访问网址： <code>https://.github.io</code></p></li></ol><p>至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://.github.io</code>。</p><h5 id="方案二：GithubPages-域名"><a href="#方案二：GithubPages-域名" class="headerlink" title="方案二：GithubPages + 域名"></a>方案二：GithubPages + 域名</h5><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p><ol><li><p>域名解析。</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为&lt;Github账号名称&gt;.github.io；</p><p>解析线路，TTL 默认即可。</p></li><li><p>仓库设置。</p><p>2.1. 打开博客仓库设置：<code>https://github.com//.github.io/settings</code></p><p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p><p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p></li><li><p>等待10分钟左右。</p><p>浏览器访问自定义域名。</p><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://.github.io</code>依然可用。</p></li></ol><h5 id="方案三：GithubPages-CodingPages-域名"><a href="#方案三：GithubPages-CodingPages-域名" class="headerlink" title="方案三：GithubPages + CodingPages + 域名"></a>方案三：GithubPages + CodingPages + 域名</h5><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p><ol><li><p>创建<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Coding账号名称&gt;</p></li><li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p></li><li><p>将本地Hexo博客推送到CodingPages</p><p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>）， 粘贴到<a href="https://dev.tencent.com/user/account/setting/keys" target="_blank" rel="noopener">新增公钥</a>。</p><p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><pre><code>$ ssh -T git@git.coding.net$ yes</code></pre><p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git  branch: master- type: git  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git  branch: master</code></pre><p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><pre><code>$ hexo g$ hexo d</code></pre></li><li><p>域名解析</p><ol><li><p>添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为&lt;Github账号名称&gt;.coding.me；</p><p>解析线路，TTL 默认即可。</p></li><li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p><p>类型选择为 A；</p><p>主机记录即域名前缀，填写为@；</p><p>记录值填写为192.30.252.153和192.30.252.154；</p><p>解析线路，境外或谷歌。</p></li><li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u//p//git/pages/settings</code>）中绑定自定义域名。</p></li></ol></li></ol><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://.github.io</code>和<code>https://.coding.me</code>依然可用。</p><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h4><p>Hexo默认的主题是landscape，推荐以下主题：</p><ol><li><a href="https://github.com/shenliyang/hexo-theme-snippet#hexo-theme-snippet" target="_blank" rel="noopener">snippet</a></li><li><a href="https://github.com/iTimeTraveler/hexo-theme-hiero#hiero" target="_blank" rel="noopener">Hiero</a></li><li><a href="https://github.com/tangkunyin/hexo-theme-jsimple#jsimple" target="_blank" rel="noopener">JSimple</a></li><li><a href="https://github.com/chaooo/hexo-theme-BlueLake#bluelake" target="_blank" rel="noopener">BlueLake</a></li></ol><p>详见：<a href="https://github.com/search?q=hexo-theme" target="_blank" rel="noopener">https://github.com/search?q=hexo-theme</a></p><h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><ol><li>下载主题</li><li>将下载好的主题文件夹，粘贴到站点目录的<code>themes</code>下。</li><li>更改站点配置文件<code>_config.yml</code> 的theme字段，为主题文件夹的名称：</li></ol><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: &lt;主题文件夹的名称&gt;</code></pre><h4 id="主题优化-1"><a href="#主题优化-1" class="headerlink" title="主题优化"></a>主题优化</h4><p>以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。</p><p>主题优化一般包括：</p><ul><li><p><strong>设置「RSS」</strong></p></li><li><p><strong>添加「标签」页面</strong></p></li><li><p><strong>添加「分类」页面</strong></p></li><li><p><strong>设置「字体」</strong></p><p>问题：引用国外字体镜像较慢。</p><p>解决：可以改用国内的。将\themes*\layout_partials\head external-fonts.swig文件中fonts.google.com改成fonts.lug.ustc.edu.cn。</p></li><li><p><strong>设置「代码高亮主题」</strong></p></li><li><p><strong>侧边栏社交链接</strong></p><p>问题：图标哪里找？</p><p>解决：<a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">Font Awesome</a></p></li><li><p><strong>开启打赏功能</strong></p><p>问题：微信支付宝二维码不美观，规格不一。</p><p>解决：<a href="https://cli.im/weixin" target="_blank" rel="noopener">在线生成二维码</a></p></li><li><p><strong>设置友情链接</strong></p></li><li><p><strong>腾讯公益404页面</strong></p></li><li><p><strong>站点建立时间</strong></p></li><li><p><strong>订阅微信公众号</strong></p></li><li><p><strong>设置「动画效果」</strong></p><p>问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。<br>解决：将主题配置文件<code>_config.yml</code>中，use_motion字段的值设为 <code>false</code> 来关闭动画。</p></li><li><p><strong>设置「背景动画」</strong></p></li></ul><p>主题优化还包括：</p><h5 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h5><p>在 themes/*/source/css/_custom/custom.styl 中添加如下代码：</p><pre><code>body{    background:url(/images/bg.jpg);    background-size:cover;    background-repeat:no-repeat;    background-attachment:fixed;    background-position:center;}</code></pre><h5 id="修改Logo字体"><a href="#修改Logo字体" class="headerlink" title="修改Logo字体"></a>修改Logo字体</h5><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p><pre><code>@font-face {    font-family: Zitiming;    src: url(&#39;/fonts/Zitiming.ttf&#39;);}.site-title {    font-size: 40px !important;    font-family: &#39;Zitiming&#39; !important;}</code></pre><p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p><h5 id="修改内容区域的宽度"><a href="#修改内容区域的宽度" class="headerlink" title="修改内容区域的宽度"></a>修改内容区域的宽度</h5><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：</p><pre><code>// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px</code></pre><h5 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p><pre><code>.site-meta {  background: $blue; //修改为自己喜欢的颜色}</code></pre><h5 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p><pre><code>// 鼠标样式  * {      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important  }  :active {      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important  }</code></pre><h5 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h5><p>打开 <code>themes/*/layout/_partials/head.swig</code>文件,在 ``之前插入代码：</p><pre><code>&lt;script&gt;    (function(){        if(&#39;{{ page.password }}&#39;){            if (prompt(&#39;请输入密码&#39;) !== &#39;{{ page.password }}&#39;){                alert(&#39;密码错误&#39;);                history.back();            }        }    })();&lt;/script&gt;</code></pre><p>写文章时加上<code>password: *</code>：</p><pre><code>---title: 2018date: 2018-10-25 16:10:03password: 123456---</code></pre><h5 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h5><ol><li>在<code>/themes/*/source/js/src</code>下新建文件<code>click.js</code>，接着把以下粘贴到<code>click.js</code>文件中。<br>代码如下：</li></ol><pre><code>!function(e,t,a){function n(){c(&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)}function o(){var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)}function s(){return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);</code></pre><ol><li>在<code>\themes\*\layout\_layout.swig</code>文件末尾添加：</li></ol><pre><code>&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</code></pre><h5 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h5><p>在站点目录下：</p><pre><code>$ npm install gulp -g</code></pre><p>安装gulp插件：</p><pre><code>npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save</code></pre><p>在 <code>Hexo</code> 站点下新建 <code>gulpfile.js</code>文件，文件内容如下：</p><pre><code>var gulp = require(&#39;gulp&#39;);var minifycss = require(&#39;gulp-minify-css&#39;);var uglify = require(&#39;gulp-uglify&#39;);var htmlmin = require(&#39;gulp-htmlmin&#39;);var htmlclean = require(&#39;gulp-htmlclean&#39;);var imagemin = require(&#39;gulp-imagemin&#39;);// 压缩css文件gulp.task(&#39;minify-css&#39;, function() {  return gulp.src(&#39;./public/**/*.css&#39;)  .pipe(minifycss())  .pipe(gulp.dest(&#39;./public&#39;));});// 压缩html文件gulp.task(&#39;minify-html&#39;, function() {  return gulp.src(&#39;./public/**/*.html&#39;)  .pipe(htmlclean())  .pipe(htmlmin({    removeComments: true,    minifyJS: true,    minifyCSS: true,    minifyURLs: true,  }))  .pipe(gulp.dest(&#39;./public&#39;))});// 压缩js文件gulp.task(&#39;minify-js&#39;, function() {    return gulp.src([&#39;./public/**/.js&#39;,&#39;!./public/js/**/*min.js&#39;])        .pipe(uglify())        .pipe(gulp.dest(&#39;./public&#39;));});// 压缩 public/demo 目录内图片gulp.task(&#39;minify-images&#39;, function() {    gulp.src(&#39;./public/demo/**/*.*&#39;)        .pipe(imagemin({           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化        }))        .pipe(gulp.dest(&#39;./public/uploads&#39;));});// 默认任务gulp.task(&#39;default&#39;, [  &#39;minify-html&#39;,&#39;minify-css&#39;,&#39;minify-js&#39;,&#39;minify-images&#39;]);</code></pre><p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p><pre><code>hexo ggulphexo d</code></pre><h5 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h5><p>默认情况下访问URL路径为：<code>domain/2018/10/18/关于本站</code>,修改为 <code>domain/About/关于本站</code>。 编辑 <code>Hexo</code> 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code>字段：</p><pre><code>permalink: :category/:title/</code></pre><h5 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h5><ol><li><p>安装插件</p><p>$ npm uninstall hexo-generator-index –save<br>$ npm install hexo-generator-index-pin-top –save</p></li></ol><p>然后在需要置顶的文章的Front-matter中加上top即可：</p><pre><code>---title: 2018date: 2018-10-25 16:10:03top: 10---</code></pre><ol><li>设置置顶标志</li></ol><p>打开：/themes/*/layout/_macro/post.swig，定位到</p><p>，插入以下代码即可：</p><pre><code>{% if post.top %}  <i class="fa fa-thumb-tack"></i>  <font color=7D26CD>置顶</font>  <span class="post-meta-divider">|</span>{% endif %}</code></pre><h5 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h5><ol><li>选择样式<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>,</li><li>修改图片跳转链接,将<code>[</code>](<a href="https://github.com/you)中的链接换为自己Github链接：" target="_blank" rel="noopener">https://github.com/you)中的链接换为自己Github链接：</a></li><li>打开 <code>themes/next/layout/_layout.swig</code> 文件，把代码复制到``下面。</li></ol><h5 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,向里面加代码:</p><pre><code>// 主页文章添加阴影效果.post {   margin-top: 0px;   margin-bottom: 60px;   padding: 25px;   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);}</code></pre><h5 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h5><p>修改<code>themes/*/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：</p><pre><code># Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true</code></pre><h5 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h5><p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下，新建：</p><pre><code>$ cd &lt;站点目录&gt;$ hexo new page categories</code></pre><h5 id="加入-广告"><a href="#加入-广告" class="headerlink" title="加入 广告"></a>加入 广告</h5><p>主要有两种：<a href="https://ssp.baidu.com/static/register.html" target="_blank" rel="noopener">百度SSP</a>和<a href="https://www.google.com/adsense/start/#/?modal_active=none" target="_blank" rel="noopener">谷歌Adsense</a>。方法类似：</p><ol><li><p>注册，复制广告代码</p></li><li><p>部署到网站。</p><p>2.1. 新建 <code>theme/*/layout/_custom/google_ad.swig</code>，将 AdSense 上的代码粘贴进去</p><p>2.2. 头部。在 <code>theme/*/layout/_custom/head.swig</code> 中也粘贴一份</p><p>2.3. 每篇博客。在 <code>theme/*/layout/post.swig</code> 里中在希望看到的地方加上：</p><pre><code>{% include '_custom/google_ad.swig' %}</code></pre><p>例如：在 <code></code> 中间插入，总代码如下：</p><pre><code>{% block content %}     <div id="posts" class="posts-expand">       {{ post_template.render(page) }}       {% include '_custom/google_ad.swig' %}     </div>   {% endblock %}</code></pre></li><li><p>等待审核通过。如果失败，可再次申请。</p></li></ol><h5 id="添加萌萌哒"><a href="#添加萌萌哒" class="headerlink" title="添加萌萌哒"></a>添加萌萌哒</h5><ol><li><p>安装插件</p><pre><code>npm install --save hexo-helper-live2d</code></pre></li><li><p>复制你喜欢的模型名字：</p><p>Epsilon2.1</p><p><a href="https://huaji8.top/img/live2d/Epsilon2.1.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/Epsilon2.1.gif" alt="img"></a></p><p>Gantzert_Felixander</p><p><a href="https://huaji8.top/img/live2d/Gantzert_Felixander.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/Gantzert_Felixander.gif" alt="img"></a></p><p>haru</p><p><a href="https://huaji8.top/img/live2d/haru.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/haru.gif" alt="img"></a></p><p>miku</p><p><a href="https://huaji8.top/img/live2d/miku.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/miku.gif" alt="img"></a></p><p>ni-j</p><p><a href="https://huaji8.top/img/live2d/ni-j.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/ni-j.gif" alt="img"></a></p><p>nico</p><p><a href="https://huaji8.top/img/live2d/nico.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nico.gif" alt="img"></a></p><p>nietzche</p><p><a href="https://huaji8.top/img/live2d/nietzche.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nietzche.gif" alt="img"></a></p><p>nipsilon</p><p><a href="https://huaji8.top/img/live2d/nipsilon.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nipsilon.gif" alt="img"></a></p><p>nito</p><p><a href="https://huaji8.top/img/live2d/nito.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nito.gif" alt="img"></a></p><p>shizuku</p><p><a href="https://huaji8.top/img/live2d/shizuku.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/shizuku.gif" alt="img"></a></p><p>tsumiki</p><p><a href="https://huaji8.top/img/live2d/tsumiki.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/tsumiki.gif" alt="img"></a></p><p>wanko</p><p><a href="https://huaji8.top/img/live2d/wanko.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/wanko.gif" alt="img"></a></p><p>z16</p><p><a href="https://huaji8.top/img/live2d/z16.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/z16.gif" alt="img"></a></p><p>hibiki</p><p><a href="https://huaji8.top/img/live2d/hibiki.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/hibiki.gif" alt="img"></a></p><p>koharu</p><p><a href="https://huaji8.top/img/live2d/koharu.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/koharu.gif" alt="img"></a></p><p>haruto</p><p><a href="https://huaji8.top/img/live2d/haruto.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/haruto.gif" alt="img"></a></p><p>Unitychan</p><p><a href="https://huaji8.top/img/live2d/Unitychan.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/Unitychan.gif" alt="img"></a></p><p>tororo</p><p><a href="https://huaji8.top/img/live2d/tororo.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/tororo.gif" alt="img"></a></p><p>hijiki</p><p><a href="https://huaji8.top/img/live2d/hijiki.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/hijiki.gif" alt="img"></a></p></li><li><p>将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p><pre><code>live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  log: false  model:    use: live2d-widget-model-&lt;你喜欢的模型名字&gt;  display:    position: right    width: 150    height: 300  mobile:    show: true</code></pre></li><li><p>建配置文件</p><p>4.1. 在站点目录下建文件夹<code>live2d_models</code>，</p><p>4.2. 再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p><p>4.3. 再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：&lt;你喜欢的模型名字&gt;.model.json</p></li><li><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p><blockquote><p>npm install –save live2d-widget-model-&lt;你喜欢的模型名字&gt;</p></blockquote></li><li><p>在命令行（即Git Bash）运行以下命令， 在<code>http://127.0.0.1:4000/</code>查看测试结果:</p><blockquote><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p></blockquote></li></ol><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。</p><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><table><thead><tr><th align="left"></th><th align="left">推荐指数</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a></td><td align="left">4</td><td align="left">每天30000条评论，10GB的储存</td><td align="left">作者评论无标识</td></tr><tr><td align="left"><a href="https://livere.com/" target="_blank" rel="noopener">来必力/livere</a></td><td align="left">4</td><td align="left">多种账号登录</td><td align="left">评论无法导出</td></tr><tr><td align="left"><a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a></td><td align="left">3</td><td align="left">美观</td><td align="left">必须备案域名</td></tr><tr><td align="left"><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a></td><td align="left">3</td><td align="left">简洁</td><td align="left">只能登陆github评论</td></tr><tr><td align="left">Disqus</td><td align="left">1</td><td align="left"></td><td align="left">需要翻*墙</td></tr></tbody></table><h5 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h5><p>1.1. 获取APP ID 和 APP Key</p><p>请先登录或注册 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>, 进入控制台后点击左下角创建应用，</p><p>进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p><p>1.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p><p>1.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p><h5 id="来必力-livere"><a href="#来必力-livere" class="headerlink" title="来必力/livere"></a>来必力/livere</h5><p>2.1. 登陆 <a href="https://livere.com/" target="_blank" rel="noopener">来必力</a> 获取你的 LiveRe UID。</p><p>2.2. 填写LiveRe UID到主题配置文件<code>_config.yml</code></p><h5 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h5><p>3.1.获取APP ID 和 APP Key</p><p>请先登录或注册 <a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a>, 点击“立即免费获取畅言”，</p><p>新建站点，点击管理，点击评论插件&gt;评论管理，</p><p>点击后台总览，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p><p>3.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p><p>3.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p><h5 id="gitment"><a href="#gitment" class="headerlink" title="gitment"></a>gitment</h5><p>4.1. 安装插件：</p><blockquote><p>npm i –save gitment</p></blockquote><p>4.2. 申请应用</p><p>在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">New OAuth App</a>为你的博客应用一个密钥:</p><pre><code>Application name:随便写Homepage URL:这个也可以随意写,就写你的博客地址就行Application description:描述,也可以随意写Authorization callback URL:这个必须写你的博客地址</code></pre><p>4.3. 配置</p><p>编辑主题配置文件<code>themes/*/_config.yml</code>:</p><pre><code># Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment:  enable: true  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway  count: true # Show comments count in post meta area  lazy: false # Comments lazy loading with a button  cleanly: false # Hide &#39;Powered by ...&#39; on footer, and more  language: # Force language, or auto switch by theme  github_user: {you github user id}  github_repo: 公开的git仓库,评论会作为那个项目的issue  client_id: {刚才申请的ClientID}  client_secret: {刚才申请的Client Secret}  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect  redirect_protocol: # Protocol of redirect_uri with force_redirect_pro</code></pre><h5 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h5><p>编辑 主题配置文件<code>themes/*/_config.yml</code>， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。</p><pre><code>disqus:  enable: false  shortname:  count: true</code></pre><h4 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h4><table><thead><tr><th align="left"></th><th align="left">推荐指数</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a></td><td align="left">4</td><td align="left">可直接将访问次数显示在您在网页上（也可不显示）</td><td align="left">只计数</td></tr><tr><td align="left">百度统计</td><td align="left">3</td><td align="left"></td><td align="left">收录慢</td></tr></tbody></table><h5 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h5><p>编辑 主题配置文件 <code>themes/*/_config.yml</code>中的<code>busuanzi_count</code>的配置项即可。</p><ul><li>当<code>enable: true</code>时，代表开启全局开关。</li><li>若<code>site_uv</code>（本站访客数）、<code>site_pv</code>（本站访客数）、<code>page_pv</code>（本文总阅读量）的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。</li></ul><p>注意：</p><pre><code>不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！</code></pre><p>解决办法：</p><ol><li><p>找到主题调用不蒜子的swig文件。一般在”\themes*\layout_third-party\analytics\busuanzi-counter.swig”</p></li><li><p>更改域名</p><pre><code>把原有的：&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;域名改一下即可：&lt;script async src=&quot;．．//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre></li></ol><h5 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h5><ol><li>登录 <a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>，定位到站点的代码获取页面</li><li>复制统计脚本 id，如图：<br>​<a href="http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png" target="_blank" rel="noopener"><img src="http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png" alt="img"></a></li><li>编辑 主题配置文件<code>themes/*/_config.yml</code>，修改字段 <code>google_analytics</code>，值设置成你的统计脚本 id。</li></ol><h4 id="内容分享服务"><a href="#内容分享服务" class="headerlink" title="内容分享服务"></a>内容分享服务</h4><table><thead><tr><th align="left"></th><th align="left">推荐指数</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left"><a href="http://share.baidu.com/" target="_blank" rel="noopener">百度分享</a></td><td align="left">4</td><td align="left">稳定</td><td align="left">不太美观</td></tr><tr><td align="left"><a href="https://github.com/revir/need-more-share2" target="_blank" rel="noopener">need-more-share2</a></td><td align="left">4</td><td align="left">美观</td><td align="left">更新不及时（比如微信分享API）</td></tr></tbody></table><h5 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h5><p>编辑 主题配置文件，添加/修改字段 <code>baidushare</code>，值为 <code>true</code>即可。</p><pre><code># 百度分享服务baidushare: true</code></pre><h5 id="need-more-share2"><a href="#need-more-share2" class="headerlink" title="need-more-share2"></a>need-more-share2</h5><p>编辑 主题配置文件，添加/修改字段 <code>needmoreshare2</code>，值为 <code>true</code>即可。</p><pre><code>needmoreshare2:  enable: true</code></pre><h4 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h4><table><thead><tr><th align="left"></th><th align="left">推荐指数</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">Local Search</td><td align="left">4</td><td align="left">配置方便</td><td align="left"></td></tr><tr><td align="left">Swiftype</td><td align="left">2</td><td align="left"></td><td align="left">需注册</td></tr><tr><td align="left">Algolia</td><td align="left">2</td><td align="left"></td><td align="left">需注册</td></tr></tbody></table><h5 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p><ol><li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><pre><code>$ npm install hexo-generator-searchdb --save</code></pre></li><li><p>编辑 站点配置文件，新增以下内容到任意位置：</p><pre><code>search:  path: search.xml  field: post  format: html  limit: 10000</code></pre></li><li><p>编辑 主题配置文件，启用本地搜索功能：</p><pre><code># Local searchlocal_search:  enable: true</code></pre></li></ol><h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。</p><h4 id="YAML-Parsing-Error"><a href="#YAML-Parsing-Error" class="headerlink" title="YAML Parsing Error"></a>YAML Parsing Error</h4><pre><code>JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:      last_updated: Last updated: %s</code></pre><ol><li>参数中包含冒号，请用加引号，如<code>Last updated: %s</code></li></ol><pre><code>JS-YAML: bad indentation of a mapping entry at line 18, column 31:      last_updated：&quot;Last updated: %s&quot;</code></pre><ol><li>字段后面的冒号必须为<strong>英文冒号</strong>，如：last_updated:</li><li>字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s”</li></ol><h4 id="EMFILE-Error"><a href="#EMFILE-Error" class="headerlink" title="EMFILE Error"></a>EMFILE Error</h4><pre><code>Error: EMFILE, too many open files</code></pre><p>生成大量的文件时，可能遇到EMFILE错误。</p><p>可以运行以下命令来增加允许同步I / O操作的数量。</p><pre><code>$ ulimit -n 10000</code></pre><h4 id="Process-Out-of-Memory"><a href="#Process-Out-of-Memory" class="headerlink" title="Process Out of Memory"></a>Process Out of Memory</h4><p>当<code>hexo g</code>时，遇到以下错误：</p><pre><code>FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory</code></pre><p>如下，更改<code>hexo-cli</code>文件的第一行，来增大nodejs堆内存.该bug已在<a href="https://github.com/hexojs/hexo/issues/1735" target="_blank" rel="noopener">新版本</a>修复。</p><pre><code>#!/usr/bin/env node --max_old_space_size=8192</code></pre><h4 id="Git-Deployment-Problems"><a href="#Git-Deployment-Problems" class="headerlink" title="Git Deployment Problems"></a>Git Deployment Problems</h4><ol><li>RPC failed</li></ol><pre><code>error: RPC failed; result=22, HTTP code = 403fatal: &#39;username.github.io&#39; does not appear to be a git repository</code></pre><p>确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。</p><ol><li>Error: ENOENT: no such file or directory</li></ol><p>这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。</p><p>解决办法：</p><ol><li>检查文章的标签和类别,确保本地和github上是相同的。</li><li>合并分支（Commit）。</li><li>清除，重构。在站点目录下，命令行（即Git Bash）运行<code>hexo clean</code>和<code>hexo g</code></li><li>手动将站点目录下的<code>public</code>文件夹复制到您的桌面</li><li>从你的master分支切换到部署在本地分支。</li><li>从桌面复制<code>public</code>文件夹到本地分支。</li><li>合并分支到github（Commit）。</li><li>切回master分支。</li></ol><h4 id="Server-Problems"><a href="#Server-Problems" class="headerlink" title="Server Problems"></a>Server Problems</h4><pre><code>Error: listen EADDRINUSE</code></pre><p>你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：</p><pre><code>$ hexo server -p 5000</code></pre><h4 id="Plugin-Installation-Problems"><a href="#Plugin-Installation-Problems" class="headerlink" title="Plugin Installation Problems"></a>Plugin Installation Problems</h4><pre><code>npm ERR! node-waf configure build</code></pre><p>这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。</p><h4 id="Error-with-DTrace-Mac-OS-X"><a href="#Error-with-DTrace-Mac-OS-X" class="headerlink" title="Error with DTrace (Mac OS X)"></a>Error with DTrace (Mac OS X)</h4><pre><code>{ [Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }{ [Error: Cannot find module &#39;./build/default/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }{ [Error: Cannot find module &#39;./build/Debug/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }</code></pre><p>DTrace安装可能有问题，重装:</p><pre><code>$ npm install hexo --no-optional</code></pre><p>详见 <a href="https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796" target="_blank" rel="noopener">#1326</a></p><h4 id="Iterate-Data-Model-on-Jade-or-Swig"><a href="#Iterate-Data-Model-on-Jade-or-Swig" class="headerlink" title="Iterate Data Model on Jade or Swig"></a>Iterate Data Model on Jade or Swig</h4><p>Hexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。</p><pre><code>{% for post in site.posts.toArray() %}{% endfor %}</code></pre><h4 id="Data-Not-Updated"><a href="#Data-Not-Updated" class="headerlink" title="Data Not Updated"></a>Data Not Updated</h4><p>一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次：</p><pre><code>$ hexo clean</code></pre><h4 id="No-command-is-executed"><a href="#No-command-is-executed" class="headerlink" title="No command is executed"></a>No command is executed</h4><p>那个不能使用除<code>help</code>、<code>init</code>和<code>version</code>以外的命令行（即Git Bash）时, 有可能时站点目录下的 <code>package.json</code>文件，缺少<code>hexo</code> ，如下:</p><pre><code>{  &quot;hexo&quot;: {    &quot;version&quot;: &quot;3.2.2&quot;  }}</code></pre><h4 id="Escape-Contents"><a href="#Escape-Contents" class="headerlink" title="Escape Contents"></a>Escape Contents</h4><p>Hexo使用Nunjucks渲染的页面. <code>{ { } }</code>或<code>{ % % }</code>将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号：</p><pre><code></code></pre><p>Hello {{ sensitive }}</p><pre><code>​```#### ENOSPC Error (Linux)如果运行命令`$ hexo server` 返回一个错误:</code></pre><p>Error: watch ENOSPC …</p><pre><code>可以通过运行`$ npm dedupe`或者以下命令行（即Git Bash）：</code></pre><p>$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</p><pre><code>来增加测试时，你可以看见的文件数量。#### EMPERM Error (Windows Subsystem for Linux)如果在Windows Subsystem for Linux，运行命令`$ hexo server` 返回这个错误:</code></pre><p>Error: watch /path/to/hexo/theme/ EMPERM</p><pre><code>因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。所以需要重新编译，再启动服务器：</code></pre><p>$ hexo generate<br>$ hexo server -s</p><pre><code>#### Template render error有时运行命令`$ hexo generate` 返回一个错误:</code></pre><p>FATAL Something’s wrong. Maybe you can find the solution here: <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">http://hexo.io/docs/troubleshooting.html</a><br>Template render error: (unknown path)</p><pre><code>这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件`_config.yml`中，比如缩进错误：错误例子：</code></pre><p>plugins:<br>hexo-generator-feed<br>hexo-generator-sitemap<br>```</p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>命令：</p><pre><code>$ hexo new [layout] &lt;title&gt;</code></pre><p>参数说明：</p><ul><li>[layout]可以为以下三种：</li></ul><table><thead><tr><th align="left">参数名</th><th align="left">功能</th><th align="left">文章路径</th></tr></thead><tbody><tr><td align="left">post</td><td align="left">新建博文</td><td align="left">source/_posts</td></tr><tr><td align="left">page</td><td align="left">新建页面（如404，分类）</td><td align="left">source</td></tr><tr><td align="left">draft</td><td align="left">草稿</td><td align="left">source/_drafts</td></tr></tbody></table><p>草稿可通过一下命令发布：</p><pre><code>$ hexo publish [layout] &lt;title&gt;</code></pre><ul><li><p>title注意：</p><p>不是博文标题，</p><p>是博文markdown文件的名字，</p><p>也是博文链接的后缀（如<code>https://www.simon96.online/2018/10/12/hexo-tutorial/</code>中的hexo-tutorial）</p></li></ul><h4 id="文章模版"><a href="#文章模版" class="headerlink" title="文章模版"></a>文章模版</h4><ul><li><p>创建模版</p><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p></li></ul><blockquote><p>$ hexo new blog “simon”</p></blockquote><p> 在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p><ul><li><p>修改参数</p><p>以下是您可以在模版中使用的变量：</p></li></ul><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">layout</td><td align="left">布局</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">date</td><td align="left">文件建立日期</td></tr></tbody></table><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p>就是博文最上方以 <code>---</code> 分隔的那部分。</p><p>默认可以使用的Front-matter：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left"></td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> WEB开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞利浦MX4000上切片运动超时</title>
      <link href="/2019/10/21/fei-li-pu-mx4000-shang-qie-pian-yun-dong-chao-shi/"/>
      <url>/2019/10/21/fei-li-pu-mx4000-shang-qie-pian-yun-dong-chao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-故障现象："><a href="#1-故障现象：" class="headerlink" title="1.故障现象："></a>1.故障现象：</h2><p>最开始使用一段时间后，设备会提示上切片运动超时，关机等一段时间后，重启设备又可以正常使用。其后设备故障发生频率越来越高，最终出现报错后再重启设备无法再恢复正常。</p><p><img src="http://pzt1mfyt3.bkt.clouddn.com/typora/20191023/lHkErTXylOQt.png?imageslim" alt="mark"></p><h2 id="2-故障检修："><a href="#2-故障检修：" class="headerlink" title="2.故障检修："></a>2.故障检修：</h2><p>１.　初步检查发现报错时，驱动伺服器红灯闪烁，驱动控制板也有红灯闪烁．<br><img src="http://pzt1mfyt3.bkt.clouddn.com/IMG_20191016_180551.jpg" style="zoom: 33%;" /></p><p>２.　拆开准直器部分盖子，发现上切片部分包括过滤器运动部分和上切片运动部分，上切片运动部分的如下图：</p><p><img src="http://pzt1mfyt3.bkt.clouddn.com/IMG_20191016_204201.jpg" alt=""></p><p>其中右侧部分的电机为控制上切片运动电机，由伺服器控制，伺服器的电源由下部的电源提供２４Ｖ供电，控制信号由驱动控制板发出．发生故障时伺服器的报错状态为３红２绿，根据伺服器上的提示，故障原因为伺服器内部电压故障．</p><p>多次测试发现，开机启动时伺服器指示灯正常，上切片自检过程中运行正常，等待一段时间后伺服器指示灯状态亮红灯，开机后提示报错．</p>]]></content>
      
      
      <categories>
          
          <category> 设备维修 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 飞利浦 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
